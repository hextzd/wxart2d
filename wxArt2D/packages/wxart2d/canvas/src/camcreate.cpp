/////////////////////////////////////////////////////////////////////////////
// Name:        camcreate.cpp
// Purpose:     
// Author:      K
// Modified by: 
// Created:     27/10/2013 15:43:45
// RCS-ID:      
// Copyright:   H
// Licence:     
/////////////////////////////////////////////////////////////////////////////

#include "a2dprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include "wx/canvas/cameleon.h"
#include "wx/canvas/camcreate.h"
#include "wx/canvas/drawer.h"

////@begin XPM images
////@end XPM images


/*!
 * a2dCamCreate type definition
 */

IMPLEMENT_DYNAMIC_CLASS( a2dCamCreate, wxDialog )


/*!
 * a2dCamCreate event table definition
 */

BEGIN_EVENT_TABLE( a2dCamCreate, wxDialog )

////@begin a2dCamCreate event table entries
    EVT_BUTTON( ID_CamCreateOke, a2dCamCreate::OnCamCreateOkeClick )

    EVT_BUTTON( ID_CamCreateCancel, a2dCamCreate::OnCancel )

////@end a2dCamCreate event table entries

END_EVENT_TABLE()


/*!
 * a2dCamCreate constructors
 */

a2dCamCreate::a2dCamCreate()
{
    Init();
}

a2dCamCreate::a2dCamCreate( wxWindow* parent, a2dHabitat* habitat, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, habitat, id, caption, pos, size, style);
}


/*!
 * a2dCamCreate creator
 */

bool a2dCamCreate::Create( wxWindow* parent, a2dHabitat* habitat, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    m_habitat = habitat;
////@begin a2dCamCreate creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end a2dCamCreate creation
    return true;
}


/*!
 * a2dCamCreate destructor
 */

a2dCamCreate::~a2dCamCreate()
{
////@begin a2dCamCreate destruction
////@end a2dCamCreate destruction
}


/*!
 * Member initialisation
 */

void a2dCamCreate::Init()
{
////@begin a2dCamCreate member initialisation
    m_habitat = NULL;
    m_camName = NULL;
    m_NrPorts = NULL;
    m_symbol = NULL;
    m_diagram = NULL;
    m_gui = NULL;
    m_instanceSymbol = NULL;
    m_instanceDiagram = NULL;
    m_noInst = NULL;
    m_oke = NULL;
    m_cancel = NULL;
////@end a2dCamCreate member initialisation
}


/*!
 * Control creation for a2dCamCreate
 */

void a2dCamCreate::CreateControls()
{    
////@begin a2dCamCreate content construction
    // Generated by DialogBlocks, 27/10/2013 16:00:44 (unregistered)

    a2dCamCreate* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 1, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, ID__CamNameText, _("Cameleon Name:"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxFIXED_MINSIZE, 5);

    m_camName = new wxTextCtrl( itemDialog1, ID_CamName, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    m_camName->SetHelpText(_("Name of the a2dCameleon to create"));
    if (a2dCamCreate::ShowToolTips())
        m_camName->SetToolTip(_("Name of the a2dCameleon to create"));
    m_camName->SetName(_T("a2dCameleon"));
    itemBoxSizer3->Add(m_camName, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer6, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemDialog1, ID_NrPortsText, _("Number of ports:"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticText7->SetHelpText(_("Number of port to create on symbol (can be modified later on)\nWhen not 0, a symbol will be automatically created. This the user can modify.\n"));
    if (a2dCamCreate::ShowToolTips())
        itemStaticText7->SetToolTip(_("Number of port to create on symbol (can be modified laterb on)"));
    itemBoxSizer6->Add(itemStaticText7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_NrPorts = new wxSpinCtrl( itemDialog1, ID_NrPorts, _T("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100, 0 );
    m_NrPorts->SetHelpText(_("The number of ports to generate on symbol, can be modified later on"));
    if (a2dCamCreate::ShowToolTips())
        m_NrPorts->SetToolTip(_("The number of ports to generate on symbol, can be modified later on"));
    itemBoxSizer6->Add(m_NrPorts, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_symbol = new wxCheckBox( itemDialog1, ID_InstSymbol, _("Symbol"), wxDefaultPosition, wxDefaultSize, 0 );
    m_symbol->SetValue(true);
    m_symbol->SetHelpText(_("Create a symbol appearance"));
    if (a2dCamCreate::ShowToolTips())
        m_symbol->SetToolTip(_("Create a symbol"));
    m_symbol->SetName(_T("symbol"));
    itemBoxSizer2->Add(m_symbol, 0, wxALIGN_LEFT|wxALL, 5);

    m_diagram = new wxCheckBox( itemDialog1, ID__InstDiagram, _("Diagram"), wxDefaultPosition, wxDefaultSize, 0 );
    m_diagram->SetValue(true);
    m_diagram->SetHelpText(_("Create a diagram appearance"));
    if (a2dCamCreate::ShowToolTips())
        m_diagram->SetToolTip(_("Create a diagram"));
    m_diagram->SetName(_T("diagram"));
    itemBoxSizer2->Add(m_diagram, 0, wxALIGN_LEFT|wxALL, 5);

    m_gui = new wxCheckBox( itemDialog1, ID_InstGui, _("Graphical Interface"), wxDefaultPosition, wxDefaultSize, 0 );
    m_gui->SetValue(false);
    m_gui->SetHelpText(_("Create a GUI Apperance"));
    if (a2dCamCreate::ShowToolTips())
        m_gui->SetToolTip(_("Create a GUI"));
    m_gui->SetName(_T("gui"));
    itemBoxSizer2->Add(m_gui, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer12Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Instanciation"));
    wxStaticBoxSizer* itemStaticBoxSizer12 = new wxStaticBoxSizer(itemStaticBoxSizer12Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer12, 0, wxALIGN_LEFT|wxALL, 5);

    m_instanceSymbol = new wxRadioButton( itemDialog1, ID_RADIOBUTTON, _("Instanciate Symbol"), wxDefaultPosition, wxDefaultSize, 0 );
    m_instanceSymbol->SetValue(true);
    m_instanceSymbol->SetHelpText(_("Create an instance of the new a2dCameleon in current view, using the symbol"));
    if (a2dCamCreate::ShowToolTips())
        m_instanceSymbol->SetToolTip(_("Create an instance of the new a2dCameleon in current view, using the symbol"));
    itemStaticBoxSizer12->Add(m_instanceSymbol, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_instanceDiagram = new wxRadioButton( itemDialog1, ID_RADIOBUTTON1, _("Instanciate Diagram"), wxDefaultPosition, wxDefaultSize, 0 );
    m_instanceDiagram->SetValue(false);
    m_instanceDiagram->SetHelpText(_("Create an instance of the new a2dCameleon in current view, using the Diagram"));
    if (a2dCamCreate::ShowToolTips())
        m_instanceDiagram->SetToolTip(_("Create an instance of the new a2dCameleon in current view, using the Diagram"));
    itemStaticBoxSizer12->Add(m_instanceDiagram, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_noInst = new wxRadioButton( itemDialog1, ID_RADIOBUTTON2, _("No instance"), wxDefaultPosition, wxDefaultSize, 0 );
    m_noInst->SetValue(false);
    m_noInst->SetHelpText(_("No instance will be added"));
    if (a2dCamCreate::ShowToolTips())
        m_noInst->SetToolTip(_("No instance will be added"));
    itemStaticBoxSizer12->Add(m_noInst, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer16, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    m_oke = new wxButton( itemDialog1, ID_CamCreateOke, _("Oke"), wxDefaultPosition, wxDefaultSize, 0 );
    m_oke->SetDefault();
    m_oke->SetName(_T("Oke"));
    itemBoxSizer16->Add(m_oke, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_cancel = new wxButton( itemDialog1, ID_CamCreateCancel, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    m_cancel->SetName(_T("Cancel"));
    itemBoxSizer16->Add(m_cancel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end a2dCamCreate content construction
}


/*!
 * Should we show tooltips?
 */

bool a2dCamCreate::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap a2dCamCreate::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin a2dCamCreate bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end a2dCamCreate bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon a2dCamCreate::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin a2dCamCreate icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end a2dCamCreate icon retrieval
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CamCreateOke
 */

void a2dCamCreate::OnCamCreateOkeClick( wxCommandEvent& event )
{
    wxString name = m_camName->GetValue();
    if ( ! name.IsEmpty() )
    {
        double grid = m_habitat->GetObjectGridSize();
        a2dCameleon* cam = new a2dCameleon( name, 0,0, m_habitat );
	    a2dCameleonEvent eventNewCameleon( a2dCanvasGlobals->GetActiveDrawingPart()->GetDrawing(), cam );
        ProcessEvent( eventNewCameleon );

        a2dDiagram* diagram = NULL;
        if ( m_symbol->GetValue() )
        {
            diagram = new a2dSymbol( cam, 0,0 );
            cam->AddAppearance( diagram );
            int nrports = m_NrPorts->GetValue();
            if ( nrports )
            {
                a2dRect* r = new a2dRect( 0, 0, 30*grid, ( nrports + 2 ) * grid*3 );
                r->SetGeneratePins( false );
                diagram->AppendToDrawing( r );
                double y = 3*grid;
                for ( int i = 0 ; i < nrports; i ++ )
                {
                    wxString strNr = wxString::Format("%s_%d", name, i);
                    a2dPort* p = new a2dPort( diagram->GetDrawing()->GetRootObject(), 0, 0, strNr, a2dPinClass::Standard );
                    p->Rotate( 180 );
                    p->Translate( 0, y );
                    diagram->AppendToDrawing( p );
                    y += 3*grid;
                }
            }
            else
            {
                a2dText* text = new a2dText( "No contents yet, draw a symbol wih port here", 0, 0, a2dCanvasModule::GetFontMedBold() );
                text->SetStrokeColour( wxColour( 124, 124,1) );
                diagram->AppendToDrawing( text );
            }
        }
        if ( m_diagram->GetValue() )
        {
            diagram = new a2dDiagram( cam, 0,0 );
            diagram->Translate( 0, - grid * 6 );
            a2dText* text = new a2dText( "No contents yet, draw a diagram with port", 0, 0, a2dCanvasModule::GetFontMedBold() );
            text->SetStrokeColour( wxColour( 124, 124,1) );
            cam->AddAppearance( diagram );
        }
        m_cameleon = cam;
        EndModal(wxID_OK);
    }
}


/*!
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_CamCreateCancel
 */

void a2dCamCreate::OnCancel( wxCommandEvent& event )
{
    EndModal( wxID_CANCEL );
}

